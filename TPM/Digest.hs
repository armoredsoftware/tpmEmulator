module TPM.Digest where
import TPM.Types
import Data.Bits
import Data.Binary
import Data.ByteString.Lazy
import qualified OpenSSL.Random as SSL
import Prelude hiding (concat,replicate,zipWith)
import qualified Data.ByteString.Lazy.Char8 as CHAR
import qualified Data.ByteString as BS
import qualified Data.ByteString.Char8 as BSC
import Data.Digest.Pure.SHA (Digest(..),bytestringDigest,sha1,hmacSha1)

-------------------------------------------------------------------------------
-- Create a new nonce value by using cryptographically
-------------------------------------------------------------------------------
tpm_digest_random :: IO TPM_DIGEST
tpm_digest_random = SSL.randBytes 20 >>= return . TPM_DIGEST . (\c->fromChunks [c])

-------------------------------------------------------------------------------
-------------------------------------------------------------------------------
tpm_digest s = TPM_DIGEST $ bytestringDigest $ sha1 s

-------------------------------------------------------------------------------
-- Create a digest value from a string value. If the argument is nothing
-- then no password was given so the resulting digest is all zeros.
-- Otherwise a SHA-1 calculation is performed on the string to produce
-- the digest value.
-------------------------------------------------------------------------------
tpm_digest_pass "" = TPM_DIGEST $ replicate 20 0
tpm_digest_pass s = TPM_DIGEST $ bytestringDigest $ sha1 (CHAR.pack s)

-------------------------------------------------------------------------------
-- Perform a TPM authentication HMAC. The first argument is the key for
-- the HMAC calculation. The second argument is the latest even nonce
-- generated by the TPM. The third argument is the latest odd nonce
-- sent to the TPM. The fourth argument is a boolean values by (0x01 ==
-- True, 0x00 == False) indicating whether the current session should be
-- continued or terminated.
-------------------------------------------------------------------------------
tpm_auth_hmac :: TPM_DIGEST -> TPM_NONCE -> TPM_NONCE -> Word8 -> 
                 ByteString -> TPM_DIGEST
tpm_auth_hmac key en od ca dat = tpm_raw_hmac key dat'
    where dig  = bytestringDigest $ sha1 dat
          dat' = concat [dig,encode en,encode od,encode ca]

-------------------------------------------------------------------------------
-------------------------------------------------------------------------------
tpm_encauth_info :: TPM_DIGEST -> TPM_NONCE -> TPM_DIGEST -> TPM_ENCAUTH
tpm_encauth_info secret nonce s = TPM_AUTHDATA $ pack result
    where enckey = bytestringDigest (sha1 (concat [encode secret,encode nonce]))
          result = zipWith xor enckey (encode s)

-------------------------------------------------------------------------------
-- Perform an HMAC SHA-1 calculation on a bytestring producing the
-- resulting digest value. The first argument is the key to use for the
-- HMAC calculation.
-------------------------------------------------------------------------------
tpm_raw_hmac :: TPM_DIGEST -> ByteString -> TPM_DIGEST
tpm_raw_hmac key dat = TPM_DIGEST $ bytestringDigest $ hmacSha1 (encode key) dat
